#
# Copyright 2016-2017 Blockie AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
_clone:
    @clone: os file string
    @include: os|/_clone/
    @include: file|/_clone/
    @include: string|/_clone/
@include: |/_clone/

_dep_install:
    _info:
        title: Check dependencies for this module.
    _env:
        - RUN: SSH_DEP_INSTALL

_info:
    title: SSH module
    desc: |
        Provides common user ssh client operations
        and remote filesystem mounting using sshfs.

keygen:
    _info:
        title: Generate SSH key pair
    _env:
        - SSHKEYFILE:
            title: SSH keyfile target
        - SSHPUBKEYFILE:
            title: Optional SSH pub keyfile copy target
            desc: |
                If this is set then the pub key will be copied here.
        - SPACE_ARGS:
            arguments:
                -
                    values:
                        - sshkeyfile
                -
                    values:
                        - sshpubkeyfile:optional

        - RUN: SSH_KEYGEN -- "${SSHKEYFILE}" "${SSHPUBKEYFILE}"

ssh:
    _info:
        title: SSH into remote machine
    _env:
        - SSHHOST:
            title: One or more addresses comma separated
        - SSHUSER:
            title: One or more users comma separated
        - SSHKEYFILE:
            title: One or more keyfiles comma separated
            completion: G
        - SSHPORT:
            title: One or more ports comma separated
        - SSHFLAGS:
            title: One or more flags comma separated
        - SSHSHELL:
            title: The remote shell to invoke
        - SSHCOMMAND:
            title: The remote command to invoke
        - SPACE_ARGS:
            arguments:
                -
                    desc: |
                        A single host address,
                        or multiple addresses
                        space separated, last
                        address is final destination.
                    values:
                        - hosts
                -
                    values:
                        - users
                -
                    values:
                        - keyfiles
                -
                    values:
                        - ports
                -
                    values:
                        - flags
                -
                    values:
                        - shell:optional
                -
                    values:
                        - command:optional
        - RUN: SSH -- "${SSHHOST}" "${SSHUSER}" "${SSHKEYFILE}" "${SSHPORT}" "${SSHFLAGS}" "${SSHSHELL}" "${SSHCOMMAND}"

mount:
    _info:
        title: Mount using sshfs
    _env:
        - SSHREMOTEPATH:
            title: Path on remote server to mount
        - SSHLOCALPATH:
            title: Local path to mount to
        - SSHHOST:
            title: One or more addresses comma separated
        - SSHUSER:
            title: One or more users comma separated
        - SSHKEYFILE:
            title: One or more keyfiles comma separated
        - SSHPORT:
            title: One or more ports comma separated
        - SSHFLAGS:
            title: One or more flags comma separated
        - SSHSHELL:
            title: The remote shell to invoke
        - SSHCOMMAND:
            title: The remote command to invoke
        - SPACE_ARGS:
            arguments:
                -
                    title: Remote path
                    values:
                        - remotepath
                -
                    title: Local path
                    values:
                        - localpath
                -
                    desc: |
                        A single host address,
                        or multiple addresses
                        space separated, last
                        address is final destination.
                    values:
                        - hosts
                -
                    values:
                        - users
                -
                    values:
                        - keyfiles
                -
                    values:
                        - ports
                -
                    values:
                        - flags
        - RUN: SSH_FS -- "${SSHREMOTEPATH}" "${SSHLOCALPATH}" "${SSHHOST}" "${SSHUSER}" "${SSHKEYFILE}" "${SSHPORT}" "${SSHFLAGS}"

umount:
    _info:
        title: Unmount sshfs mountpoint
    _env:
        - SSHLOCALPATH:
            title: Local path to unmount
        - RUN: SSH_FS_UMOUNT -- "${SSHLOCALPATH}"

tunnel:
    reverse:
        @include: |/ssh/
        _info:
            title: Create reverse tunnel from remote to here
            desc: |
                Opens SSH connection to remote server and from there
                the SSH server will listen on a local port and all
                clients connecting to that port will get routed back
                here to then connect to a local port.
        _env:
            - SSHTUNNEL:
                title: SSH tunnel parameters
                desc: |
                    The format is bindhost:bindport:localhost:localport
                    bindhost and bindport are on the remote server,
                    localhost and localport are on the local computer.
                    If bindport=0 then a random port will be chosen by
                    sshd and outputed on clients stderr.
                    
                    bindhost:bindport may also be a UNIX socket on the remote
                    server, which however requires openssl 6.7 or later on the server,
                    and possibly also requires more from the server sshd configuration.
                values:
                    - bindhost:bindport:localhost:localport
            - SSHFLAGS: ${SSHFLAGS:+$SSHFLAGS;}-oExitOnForwardFailure=yes;-R${SSHTUNNEL}
            - RUN: SSH -- "${SSHHOST}" "${SSHUSER}" "${SSHKEYFILE}" "${SSHPORT}" "${SSHFLAGS}" "${SSHSHELL}" "${SSHCOMMAND}"
    wrap_reverse:
        _info:
            title: Reverse tunnel as a wrapper
            desc: |
                An example of wrapping a reverse tunnel could be when the SSH user does not have root priviligies and cannot
                access ports below 1024. Then we can use this command as a wrapper and add something as:
                    -m os /shell/ -e command="socat tcp-listen:80,fork,reuseaddr tcp-connect:127.0.0.1:7474" -s sudo
                This will run `socat` in the server using sudo so we can listen to port 80 and then tunnel
                it back home.
        _env:
            - SSHTUNNEL:
                title: SSH tunnel parameters
            - SSHFLAGS: ${SSHFLAGS:+$SSHFLAGS;}-oExitOnForwardFailure=yes;-R${SSHTUNNEL}
            - SPACE_WRAP: SSH_WRAP
    forward:
        @include: |/ssh/
        _info:
            title: Create forward tunnel from here to remote
            desc: |
                Opens SSH connection to remote server and from here
                SSH will listen to connections on a socket and forward
                all those connections to the remote server where SSHD
                will open a connection to the remotehost:remoteport address.
        _env:
            - SSHTUNNEL:
                title: SSH tunnel parameters
                desc: |
                    The format is localhost:localport:remotehost:remoteport
                    localhost and localport are on the local computer.
                    remotehost and remoteport is the target address which will
                    be connected to from the remote server.
                    
                    localhost:localport may also be a UNIX socket on the
                    client, which however requires openssl 6.7 or later,
                    and possibly requires more from the server sshd configuration.
                values:
                    - localhost:localport:remotehost:remoteport
            - SSHFLAGS: ${SSHFLAGS:+$SSHFLAGS;}-L${SSHTUNNEL}
            - RUN: SSH -- "${SSHHOST}" "${SSHUSER}" "${SSHKEYFILE}" "${SSHPORT}" "${SSHFLAGS}" "${SSHSHELL}" "${SSHCOMMAND}"
    socks:
        @include: |/ssh/
        _info:
            title: Create SOCKS tunnel from here to remote
            desc: |
                Create SOCKS tunnel to remote server.
                Remember to configure your browser to use socks5 proxy
                on 127.0.0.1:port.
        _env:
            - SSHTUNNEL:
                title: SSH tunnel parameters
                desc: |
                    The format is bindhost:bindport
                    bindhost and bindport are on the local computer.
                values:
                    - 127.0.0.1:9333
            - SSHFLAGS: ${SSHFLAGS:+$SSHFLAGS;}-D${SSHTUNNEL}
            - RUN: SSH -- "${SSHHOST}" "${SSHUSER}" "${SSHKEYFILE}" "${SSHPORT}" "${SSHFLAGS}" "${SSHSHELL}" "${SSHCOMMAND}"

wrap:
    _info:
        title: Wrap other command in SSH call.
        desc: |
            You could have a list of remote hosts
            to connect through, a.k.a. jump hosts.
    _env:
        - SSHHOST:
            title: One or more addresses comma separated
        - SSHUSER:
            title: One or more users comma separated
        - SSHKEYFILE:
            title: One or more keyfiles comma separated
        - SSHPORT:
            title: One or more ports comma separated
        - SSHFLAGS:
            title: One or more flags comma separated
        - SSHSHELL:
            title: The remote shell to invoke
        - SPACE_WRAP: SSH_WRAP

addsshkey:
    _info:
        title: Add public key
        desc: |
            Add a ssh public key to a remote users authorized_keys file.
    _env:
        - targetuser:
            title: user to add pub key for
        - sshpubkeyfile:
            title: Public key file to add
            completion: G
        - SPACE_ARGS:
            arguments:
                -
                    title: Target user
                    values:
                        - targetuser
                -
                    title: Public key file to add
                    completion: G
        - RUN: SSH_ADD_SSH_KEY -- "${targetuser}" "${sshpubkeyfile}"

resetsshkey:
    _info:
        title: Reset ssh key
        desc: |
            Reset the remote users authorized_keys file to only hold one pub key.
            The pub key uploaded should be the current one being used by you.
    _env:
        - targetuser:
            title: user to add pub key for
        - targetuserpubkeyfile:
            title: User to reset pub key for
            completion: G
        - SPACE_ARGS:
            arguments:
                -
                    title: User to reset pub key for
                    values:
                        - targetuser
                -
                    title: Public key file to add
                    completion: G
        - RUN: SSH_RESET_SSH_KEY -- "${targetuser}" "${targetuserpubkeyfile}"
...
